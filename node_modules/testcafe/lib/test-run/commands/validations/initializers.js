"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const selector_builder_1 = __importDefault(require("../../../client-functions/selectors/selector-builder"));
const test_run_1 = require("../../../errors/test-run");
const runtime_1 = require("../../../errors/runtime");
const observation_1 = require("../observation");
const execute_js_expression_1 = __importDefault(require("../../execute-js-expression"));
const utils_1 = require("../utils");
function initUploadSelector(name, val, initOptions) {
    initOptions.skipVisibilityCheck = true;
    return initSelector(name, val, initOptions);
}
exports.initUploadSelector = initUploadSelector;
function initSelector(name, val, _a) {
    var { testRun } = _a, options = __rest(_a, ["testRun"]);
    if (val instanceof observation_1.ExecuteSelectorCommand)
        return val;
    try {
        if (utils_1.isJSExpression(val))
            val = execute_js_expression_1.default(val.value, testRun, options);
        const { skipVisibilityCheck } = options, builderOptions = __rest(options, ["skipVisibilityCheck"]);
        const builder = new selector_builder_1.default(val, Object.assign({ visibilityCheck: !skipVisibilityCheck }, builderOptions), { instantiation: 'Selector' });
        return builder.getCommand([]);
    }
    catch (err) {
        throw new test_run_1.ActionSelectorError(name, err, err instanceof runtime_1.APIError);
    }
}
exports.initSelector = initSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Rlc3QtcnVuL2NvbW1hbmRzL3ZhbGlkYXRpb25zL2luaXRpYWxpemVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLDRHQUFtRjtBQUNuRix1REFBK0Q7QUFDL0QscURBQW1EO0FBQ25ELGdEQUF3RDtBQUN4RCx3RkFBOEQ7QUFDOUQsb0NBQTBDO0FBRTFDLFNBQWdCLGtCQUFrQixDQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsV0FBVztJQUN0RCxXQUFXLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0lBRXZDLE9BQU8sWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUpELGdEQUlDO0FBRUQsU0FBZ0IsWUFBWSxDQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBdUI7UUFBdkIsRUFBRSxPQUFPLE9BQWMsRUFBWixpQ0FBVTtJQUMxRCxJQUFJLEdBQUcsWUFBWSxvQ0FBc0I7UUFDckMsT0FBTyxHQUFHLENBQUM7SUFFZixJQUFJO1FBQ0EsSUFBSSxzQkFBYyxDQUFDLEdBQUcsQ0FBQztZQUNuQixHQUFHLEdBQUcsK0JBQW1CLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0QsTUFBTSxFQUFFLG1CQUFtQixLQUF3QixPQUFPLEVBQTdCLHlEQUE2QixDQUFDO1FBRTNELE1BQU0sT0FBTyxHQUFHLElBQUksMEJBQWUsQ0FBQyxHQUFHLGtCQUNuQyxlQUFlLEVBQUUsQ0FBQyxtQkFBbUIsSUFDbEMsY0FBYyxHQUNsQixFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRWxDLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNqQztJQUNELE9BQU8sR0FBRyxFQUFFO1FBQ1IsTUFBTSxJQUFJLDhCQUFtQixDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxZQUFZLGtCQUFRLENBQUMsQ0FBQztLQUNyRTtBQUNMLENBQUM7QUFwQkQsb0NBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlbGVjdG9yQnVpbGRlciBmcm9tICcuLi8uLi8uLi9jbGllbnQtZnVuY3Rpb25zL3NlbGVjdG9ycy9zZWxlY3Rvci1idWlsZGVyJztcbmltcG9ydCB7IEFjdGlvblNlbGVjdG9yRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBFeGVjdXRlU2VsZWN0b3JDb21tYW5kIH0gZnJvbSAnLi4vb2JzZXJ2YXRpb24nO1xuaW1wb3J0IGV4ZWN1dGVKc0V4cHJlc3Npb24gZnJvbSAnLi4vLi4vZXhlY3V0ZS1qcy1leHByZXNzaW9uJztcbmltcG9ydCB7IGlzSlNFeHByZXNzaW9uIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFVwbG9hZFNlbGVjdG9yIChuYW1lLCB2YWwsIGluaXRPcHRpb25zKSB7XG4gICAgaW5pdE9wdGlvbnMuc2tpcFZpc2liaWxpdHlDaGVjayA9IHRydWU7XG5cbiAgICByZXR1cm4gaW5pdFNlbGVjdG9yKG5hbWUsIHZhbCwgaW5pdE9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNlbGVjdG9yIChuYW1lLCB2YWwsIHsgdGVzdFJ1biwgLi4ub3B0aW9ucyB9KSB7XG4gICAgaWYgKHZhbCBpbnN0YW5jZW9mIEV4ZWN1dGVTZWxlY3RvckNvbW1hbmQpXG4gICAgICAgIHJldHVybiB2YWw7XG5cbiAgICB0cnkge1xuICAgICAgICBpZiAoaXNKU0V4cHJlc3Npb24odmFsKSlcbiAgICAgICAgICAgIHZhbCA9IGV4ZWN1dGVKc0V4cHJlc3Npb24odmFsLnZhbHVlLCB0ZXN0UnVuLCBvcHRpb25zKTtcblxuICAgICAgICBjb25zdCB7IHNraXBWaXNpYmlsaXR5Q2hlY2ssIC4uLmJ1aWxkZXJPcHRpb25zIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgU2VsZWN0b3JCdWlsZGVyKHZhbCwge1xuICAgICAgICAgICAgdmlzaWJpbGl0eUNoZWNrOiAhc2tpcFZpc2liaWxpdHlDaGVjayxcbiAgICAgICAgICAgIC4uLmJ1aWxkZXJPcHRpb25zXG4gICAgICAgIH0sIHsgaW5zdGFudGlhdGlvbjogJ1NlbGVjdG9yJyB9KTtcblxuICAgICAgICByZXR1cm4gYnVpbGRlci5nZXRDb21tYW5kKFtdKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgQWN0aW9uU2VsZWN0b3JFcnJvcihuYW1lLCBlcnIsIGVyciBpbnN0YW5jZW9mIEFQSUVycm9yKTtcbiAgICB9XG59XG4iXX0=