"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const nanoid_1 = __importDefault(require("nanoid"));
const phase_1 = __importDefault(require("./phase"));
const type_assertions_1 = require("../errors/runtime/type-assertions");
const wrap_test_function_1 = __importDefault(require("../api/wrap-test-function"));
const test_page_url_1 = require("../api/test-page-url");
const actions_1 = require("../test-run/commands/actions");
const marker_symbol_1 = __importDefault(require("./marker-symbol"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
class Role extends events_1.EventEmitter {
    constructor(loginPage, initFn, options = {}) {
        super();
        this[marker_symbol_1.default] = true;
        this.id = nanoid_1.default(7);
        this.phase = loginPage ? phase_1.default.uninitialized : phase_1.default.initialized;
        this.loginPage = loginPage;
        this.initFn = initFn;
        this.opts = options;
        this.url = null;
        this.stateSnapshot = testcafe_hammerhead_1.StateSnapshot.empty();
        this.initErr = null;
    }
    async _navigateToLoginPage(testRun) {
        const navigateCommand = new actions_1.NavigateToCommand({
            url: this.loginPage,
            forceReload: true
        });
        await testRun.executeCommand(navigateCommand);
    }
    async _storeStateSnapshot(testRun) {
        if (this.initErr)
            return;
        this.stateSnapshot = await testRun.getStateSnapshot();
    }
    async _executeInitFn(testRun) {
        try {
            testRun.disableDebugBreakpoints = false;
            await this.initFn(testRun);
        }
        catch (err) {
            this.initErr = err;
        }
        finally {
            testRun.disableDebugBreakpoints = true;
        }
    }
    async initialize(testRun) {
        this.phase = phase_1.default.pendingInitialization;
        await testRun.switchToCleanRun();
        await this._navigateToLoginPage(testRun);
        await this._executeInitFn(testRun);
        await this._storeStateSnapshot(testRun);
        if (this.opts.preserveUrl)
            this.url = await testRun.getCurrentUrl();
        this.phase = phase_1.default.initialized;
        this.emit('initialized');
    }
}
function createRole(loginPage, initFn, options = {}) {
    type_assertions_1.assertType(type_assertions_1.is.string, 'Role', '"loginPage" argument', loginPage);
    type_assertions_1.assertType(type_assertions_1.is.function, 'Role', '"initFn" argument', initFn);
    type_assertions_1.assertType(type_assertions_1.is.nonNullObject, 'Role', '"options" argument', options);
    if (options.preserveUrl !== void 0)
        type_assertions_1.assertType(type_assertions_1.is.boolean, 'Role', '"preserveUrl" option', options.preserveUrl);
    loginPage = test_page_url_1.resolvePageUrl(loginPage);
    initFn = wrap_test_function_1.default(initFn);
    return new Role(loginPage, initFn, options);
}
exports.createRole = createRole;
function createAnonymousRole() {
    return new Role(null, null);
}
exports.createAnonymousRole = createAnonymousRole;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm9sZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1DQUFzQztBQUN0QyxvREFBNEI7QUFDNUIsb0RBQTRCO0FBQzVCLHVFQUFtRTtBQUNuRSxtRkFBeUQ7QUFDekQsd0RBQXNEO0FBQ3RELDBEQUFpRTtBQUNqRSxvRUFBeUM7QUFDekMsNkRBQW9EO0FBRXBELE1BQU0sSUFBSyxTQUFRLHFCQUFZO0lBQzNCLFlBQWEsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEdBQUcsRUFBRTtRQUN4QyxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyx1QkFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXhCLElBQUksQ0FBQyxFQUFFLEdBQU0sZ0JBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsZUFBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsZUFBSyxDQUFDLFdBQVcsQ0FBQztRQUVqRSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFNLE1BQU0sQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFRLE9BQU8sQ0FBQztRQUV6QixJQUFJLENBQUMsR0FBRyxHQUFhLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLG1DQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBUyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVELEtBQUssQ0FBQyxvQkFBb0IsQ0FBRSxPQUFPO1FBQy9CLE1BQU0sZUFBZSxHQUFHLElBQUksMkJBQWlCLENBQUM7WUFDMUMsR0FBRyxFQUFVLElBQUksQ0FBQyxTQUFTO1lBQzNCLFdBQVcsRUFBRSxJQUFJO1NBQ3BCLENBQUMsQ0FBQztRQUVILE1BQU0sT0FBTyxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsS0FBSyxDQUFDLG1CQUFtQixDQUFFLE9BQU87UUFDOUIsSUFBSSxJQUFJLENBQUMsT0FBTztZQUNaLE9BQU87UUFFWCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUUsT0FBTztRQUN6QixJQUFJO1lBQ0EsT0FBTyxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztZQUN4QyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7UUFDRCxPQUFPLEdBQUcsRUFBRTtZQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1NBQ3RCO2dCQUNPO1lBQ0osT0FBTyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztTQUMxQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFFLE9BQU87UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFLLENBQUMscUJBQXFCLENBQUM7UUFFekMsTUFBTSxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNqQyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7WUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU3QyxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQUssQ0FBQyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0o7QUFFRCxTQUFnQixVQUFVLENBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEdBQUcsRUFBRTtJQUN2RCw0QkFBVSxDQUFDLG9CQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRSw0QkFBVSxDQUFDLG9CQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3RCw0QkFBVSxDQUFDLG9CQUFFLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVwRSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssS0FBSyxDQUFDO1FBQzlCLDRCQUFVLENBQUMsb0JBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLHNCQUFzQixFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVoRixTQUFTLEdBQUcsOEJBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QyxNQUFNLEdBQU0sNEJBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFckMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFaRCxnQ0FZQztBQUVELFNBQWdCLG1CQUFtQjtJQUMvQixPQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRkQsa0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IG5hbm9pZCBmcm9tICduYW5vaWQnO1xuaW1wb3J0IFBIQVNFIGZyb20gJy4vcGhhc2UnO1xuaW1wb3J0IHsgYXNzZXJ0VHlwZSwgaXMgfSBmcm9tICcuLi9lcnJvcnMvcnVudGltZS90eXBlLWFzc2VydGlvbnMnO1xuaW1wb3J0IHdyYXBUZXN0RnVuY3Rpb24gZnJvbSAnLi4vYXBpL3dyYXAtdGVzdC1mdW5jdGlvbic7XG5pbXBvcnQgeyByZXNvbHZlUGFnZVVybCB9IGZyb20gJy4uL2FwaS90ZXN0LXBhZ2UtdXJsJztcbmltcG9ydCB7IE5hdmlnYXRlVG9Db21tYW5kIH0gZnJvbSAnLi4vdGVzdC1ydW4vY29tbWFuZHMvYWN0aW9ucyc7XG5pbXBvcnQgcm9sZU1hcmtlciBmcm9tICcuL21hcmtlci1zeW1ib2wnO1xuaW1wb3J0IHsgU3RhdGVTbmFwc2hvdCB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuXG5jbGFzcyBSb2xlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvciAobG9naW5QYWdlLCBpbml0Rm4sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXNbcm9sZU1hcmtlcl0gPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuaWQgICAgPSBuYW5vaWQoNyk7XG4gICAgICAgIHRoaXMucGhhc2UgPSBsb2dpblBhZ2UgPyBQSEFTRS51bmluaXRpYWxpemVkIDogUEhBU0UuaW5pdGlhbGl6ZWQ7XG5cbiAgICAgICAgdGhpcy5sb2dpblBhZ2UgPSBsb2dpblBhZ2U7XG4gICAgICAgIHRoaXMuaW5pdEZuICAgID0gaW5pdEZuO1xuICAgICAgICB0aGlzLm9wdHMgICAgICA9IG9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy51cmwgICAgICAgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZVNuYXBzaG90ID0gU3RhdGVTbmFwc2hvdC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmluaXRFcnIgICAgICAgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIF9uYXZpZ2F0ZVRvTG9naW5QYWdlICh0ZXN0UnVuKSB7XG4gICAgICAgIGNvbnN0IG5hdmlnYXRlQ29tbWFuZCA9IG5ldyBOYXZpZ2F0ZVRvQ29tbWFuZCh7XG4gICAgICAgICAgICB1cmw6ICAgICAgICAgdGhpcy5sb2dpblBhZ2UsXG4gICAgICAgICAgICBmb3JjZVJlbG9hZDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCB0ZXN0UnVuLmV4ZWN1dGVDb21tYW5kKG5hdmlnYXRlQ29tbWFuZCk7XG4gICAgfVxuXG4gICAgYXN5bmMgX3N0b3JlU3RhdGVTbmFwc2hvdCAodGVzdFJ1bikge1xuICAgICAgICBpZiAodGhpcy5pbml0RXJyKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuc3RhdGVTbmFwc2hvdCA9IGF3YWl0IHRlc3RSdW4uZ2V0U3RhdGVTbmFwc2hvdCgpO1xuICAgIH1cblxuICAgIGFzeW5jIF9leGVjdXRlSW5pdEZuICh0ZXN0UnVuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ZXN0UnVuLmRpc2FibGVEZWJ1Z0JyZWFrcG9pbnRzID0gZmFsc2U7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRGbih0ZXN0UnVuKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRFcnIgPSBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0ZXN0UnVuLmRpc2FibGVEZWJ1Z0JyZWFrcG9pbnRzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGluaXRpYWxpemUgKHRlc3RSdW4pIHtcbiAgICAgICAgdGhpcy5waGFzZSA9IFBIQVNFLnBlbmRpbmdJbml0aWFsaXphdGlvbjtcblxuICAgICAgICBhd2FpdCB0ZXN0UnVuLnN3aXRjaFRvQ2xlYW5SdW4oKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fbmF2aWdhdGVUb0xvZ2luUGFnZSh0ZXN0UnVuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fZXhlY3V0ZUluaXRGbih0ZXN0UnVuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fc3RvcmVTdGF0ZVNuYXBzaG90KHRlc3RSdW4pO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdHMucHJlc2VydmVVcmwpXG4gICAgICAgICAgICB0aGlzLnVybCA9IGF3YWl0IHRlc3RSdW4uZ2V0Q3VycmVudFVybCgpO1xuXG4gICAgICAgIHRoaXMucGhhc2UgPSBQSEFTRS5pbml0aWFsaXplZDtcbiAgICAgICAgdGhpcy5lbWl0KCdpbml0aWFsaXplZCcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJvbGUgKGxvZ2luUGFnZSwgaW5pdEZuLCBvcHRpb25zID0ge30pIHtcbiAgICBhc3NlcnRUeXBlKGlzLnN0cmluZywgJ1JvbGUnLCAnXCJsb2dpblBhZ2VcIiBhcmd1bWVudCcsIGxvZ2luUGFnZSk7XG4gICAgYXNzZXJ0VHlwZShpcy5mdW5jdGlvbiwgJ1JvbGUnLCAnXCJpbml0Rm5cIiBhcmd1bWVudCcsIGluaXRGbik7XG4gICAgYXNzZXJ0VHlwZShpcy5ub25OdWxsT2JqZWN0LCAnUm9sZScsICdcIm9wdGlvbnNcIiBhcmd1bWVudCcsIG9wdGlvbnMpO1xuXG4gICAgaWYgKG9wdGlvbnMucHJlc2VydmVVcmwgIT09IHZvaWQgMClcbiAgICAgICAgYXNzZXJ0VHlwZShpcy5ib29sZWFuLCAnUm9sZScsICdcInByZXNlcnZlVXJsXCIgb3B0aW9uJywgb3B0aW9ucy5wcmVzZXJ2ZVVybCk7XG5cbiAgICBsb2dpblBhZ2UgPSByZXNvbHZlUGFnZVVybChsb2dpblBhZ2UpO1xuICAgIGluaXRGbiAgICA9IHdyYXBUZXN0RnVuY3Rpb24oaW5pdEZuKTtcblxuICAgIHJldHVybiBuZXcgUm9sZShsb2dpblBhZ2UsIGluaXRGbiwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBbm9ueW1vdXNSb2xlICgpIHtcbiAgICByZXR1cm4gbmV3IFJvbGUobnVsbCwgbnVsbCk7XG59XG4iXX0=